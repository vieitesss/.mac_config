set -euo pipefail

GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[0;33m'
NC='\033[0m' # No Color

DOTFILES="$HOME/.mac_config"
KBD_LAYOUT="$DOTFILES/mac_keyboard_layout"
CONFIG_DIR="$DOTFILES/installation"
ARQ="$(uname -m)"
OS="$(uname)"

# Set OS-specific variables
if [[ "$OS" == "Darwin" ]]; then
    DEPENDENCIES="${CONFIG_DIR}/brew_dependencies.txt"
    DEFAULTS="${CONFIG_DIR}/mac_defaults"
    IS_MACOS=true
elif [[ "$OS" == "Linux" ]]; then
    DEPENDENCIES="${CONFIG_DIR}/linux_dependencies.txt"
    IS_MACOS=false
else
    error "Unsupported operating system: $OS"
fi

log () {
    echo -e "${GREEN}[INFO]${NC} $1"
}

warn () {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error () {
    echo -e "${RED}[ERROR]${NC} $1" >&2
    exit 1
}

exists_command () {
    command -v "$1" >/dev/null 2>&1
}

needs_root () {
    if [ "$EUID" -ne 0 ]
    then
        warn "This step needs root privileges."
        sudo -v || { echo "Error obtaining root privileges."; exit 1; }
    fi
}

install_brew () {
    if exists_command "brew"
    then
        log "Homebrew is already installed."
        return 0
    fi

    log "Installing Homebrew..."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || error "Error installing Homebrew."
}

install_apt_dependencies () {
    [ ! -f "$DEPENDENCIES" ] && error "The file $DEPENDENCIES does not exist."

    log "Installing apt dependencies..."
    sudo apt update || error "Error updating apt cache."

    # Read packages from file, excluding comments and empty lines
    grep -v '^#' "$DEPENDENCIES" | grep -v '^$' | while read -r package; do
        if ! dpkg -l | grep -q "^ii  $package "; then
            log "Installing $package..."
            sudo apt install -y "$package" || warn "Could not install $package (may need manual installation)"
        fi
    done
}

install_brew_dependencies () {
    [ ! -f "$DEPENDENCIES" ] && error "The file $DEPENDENCIES does not exist."

    log "Installing Homebrew dependencies..."
    brew bundle install --file="$DEPENDENCIES" || error "Error installing Homebrew dependencies."
}

install_dependencies () {
    if [[ "$IS_MACOS" == true ]]; then
        install_brew
        install_brew_dependencies
    else
        install_apt_dependencies
    fi
}

apply_defaults () {
    if [[ "$IS_MACOS" != true ]]; then
        log "Skipping macOS defaults (not on macOS)"
        return 0
    fi

    [ ! -f "$DEFAULTS" ] && error "The file $DEFAULTS does not exist."

    log "Applying default configurations..."
    "$DEFAULTS" || error "Error applying default configurations."
}

install_neovim () {
    local url="$1"
    shift || true

    log "Installing Neovim $url ... "

    local dest="$(echo ${url} | xargs basename)"
    local dir="$(echo $dest | sed 's/\..*//g')"

    curl -Lk -o "$dest" "$url"
    tar xzvf "$dest"
    rm "$dest"
    needs_root
    sudo mkdir -p /usr/local/opt
    sudo rm -rf /usr/local/opt/"$dir" || true
    sudo mv ./"$dir" /usr/local/opt

    # Create link
    sudo rm -rf /usr/local/bin/nvim || true
    sudo ln -s /usr/local/opt/"$dir"/bin/nvim /usr/local/bin/nvim

    # Download config
    git clone https://github.com/vieitesss/nvim "$HOME/.config/nvim" || true

    log "Neovim installed successfully"
}

install_zinit () {
    local zinit_home="${XDG_DATA_HOME:-${HOME}/.local/share}/zinit/zinit.git"

    if [ -d "$zinit_home" ]; then
        log "Zinit is already installed."
        return 0
    fi

    log "Installing zinit..."
    mkdir -p "$(dirname "$zinit_home")"
    git clone https://github.com/zdharma-continuum/zinit.git "$zinit_home" || error "Error installing zinit."

    log "Zinit installed successfully. Powerlevel10k will be installed when zsh is first launched."
}

load_configs () {
    # Define configs based on OS
    local configs=("alacritty" "zsh" "git")

    # Add macOS-specific configs
    if [[ "$IS_MACOS" == true ]]; then
        configs+=("aerospace" "hammerspoon" "karabiner")
    fi

    for c in "${configs[@]}"
    do
        if [ -d "$DOTFILES/$c" ]
        then
            log "Loading configuration for $c..."
            stow "$c" -d "$DOTFILES" -t "$HOME" || warn "Error loading configuration for $c."
        else
            warn "Could not find configuration for $c."
        fi
    done
}

save_kbd_layout () {
    if [[ "$IS_MACOS" != true ]]; then
        log "Skipping keyboard layout installation (not on macOS)"
        return 0
    fi

    [ ! -d "$KBD_LAYOUT" ] && error "The directory $KBD_LAYOUT does not exist."

    log "Copying keyboard layout..."

    needs_root
    sudo cp -r "$KBD_LAYOUT"/* "/Library/Keyboard Layouts" || error "Error copying keyboard layout."

    warn "Restart your computer to apply the changes."
}

help () {
    cat <<EOF
    Usage: $0 OPTION

    OPTIONS:
    deps	install package dependencies (brew on macOS, apt on Linux)
    neovim	install Neovim
    zinit	install zinit and powerlevel10k
    kbd	install keyboard configuration (macOS only)
    dots	load dotfiles configuration
    defaults	apply macOS defaults (macOS only)
    all	install all the above
EOF
}

pick_neovim () {
    local version="$1"
    local version_path=""

    log "Installing Neovim version: $version"
    case "$version" in
        "latest")
            version_path="latest/download"
            ;;
        "nightly")
            version_path="download/nightly"
            ;;
        *)
            error "Invalid Neovim version: $version. Use 'latest' or 'nightly'."
            ;;
    esac

    local os="macos"
    if [[ "$OS" == "Linux" ]]
    then
        os="linux"
    fi

    local url="https://github.com/neovim/neovim/releases/${version_path}"
    case "$ARQ" in
        arm64|aarch64) url="${url}/nvim-${os}-arm64.tar.gz" ;;
        *) url="${url}/nvim-${os}-x86_64.tar.gz" ;;
    esac

    install_neovim "$url"
}

main () {
    test "$#" -eq 0 && help "$@" && exit 1

    option="$1"
    if [[ "$#" -gt 1 && ("$option" == "neovim" || "$option" != "all") ]]
    then
        neovim_version="$2"
    fi
    shift 2 || true

    case "$option" in
        "deps")
            install_dependencies
            ;;
        "defaults") apply_defaults ;;
        "neovim") pick_neovim "$neovim_version" ;;
        "zinit") install_zinit ;;
        "dots") load_configs ;;
        "kbd") save_kbd_layout ;;
        "all")
            install_dependencies
            apply_defaults
            pick_neovim "$neovim_version"
            install_zinit
            load_configs
            save_kbd_layout
            ;;
        *)
            help "$@"
            exit 1
            ;;
    esac

    log "Configuration completed successfully."
    warn "Remember to create an ssh key for GitHub."
}

# TODO: create ssh key for GH if it does not exist

main "$@"
